{"version":3,"file":"fibrelite.m.js","sources":["../fibrelite.js"],"sourcesContent":["export default function fibrelite(asyncFunction, totalThreads, debounce) {\n\n    const pool = [];\n    this.roundRobin = 0;\n    this.totalThreads = totalThreads || 1;\n    this.debounce = debounce || 333;\n\n    // More than 20 web workers will crash most browsers\n    if (this.totalThreads > 20) {\n        this.totalThreads = 20;\n    }\n\n    // getThread is entirely based on Jason Millers Greenlet \n    // https://github.com/developit/greenlet\n\n    /** Move an async function into its own thread.\n     *  @param {Function} asyncFunction  An (async) function to run in a Worker.\n     *  @public\n     */\n    const getThread = (asyncFunction) => {\n        // A simple counter is used to generate worker-global unique ID's for RPC:\n        let currentId = 0;\n\n        // Outward-facing promises store their \"controllers\" (`[request, reject]`) here:\n        const promises = {};\n\n        // Create an \"inline\" worker (1:1 at definition time)\n        const worker = new Worker(\n            // Use a data URI for the worker's src. It inlines the target function and an RPC handler:\n            'data:,$$='+asyncFunction+';onmessage='+(e => {\n                /* global $$ */\n\n                // Invoking within then() captures exceptions in the supplied async function as rejections\n                Promise.resolve(e.data[1]).then(\n                    v => $$.apply($$, v)\n                ).then(\n                    // success handler - callback(id, SUCCESS(0), result)\n                    // if `d` is transferable transfer zero-copy\n                    d => {\n                        postMessage([e.data[0], 0, d], [d].filter(x => (\n                            (x instanceof ArrayBuffer) ||\n                            (x instanceof MessagePort) ||\n                            (x instanceof ImageBitmap)\n                        )));\n                    },\n                    // error handler - callback(id, ERROR(1), error)\n                    er => { postMessage([e.data[0], 1, '' + er]); }\n                );\n            })\n        );\n\n        /** Handle RPC results/errors coming back out of the worker.\n         *  Messages coming from the worker take the form `[id, status, result]`:\n         *    id     - counter-based unique ID for the RPC call\n         *    status - 0 for success, 1 for failure\n         *    result - the result or error, depending on `status`\n         */\n        worker.onmessage = e => {\n            // invoke the promise's resolve() or reject() depending on whether there was an error.\n            promises[e.data[0]][e.data[1]](e.data[2]);\n\n            // ... then delete the promise controller\n            promises[e.data[0]] = null;\n        };\n\n        const thread = {\n            resolved: false,\n            worker: worker,\n            fn : function() {\n                const args = [].slice.call(arguments);\n                return new Promise(function () {\n\n                    // Add the promise controller to the registry\n                    promises[++currentId] = arguments;\n\n                    // Send an RPC call to the worker - call(id, params)\n                    // The filter is to provide a list of transferables to send zero-copy\n                    worker.postMessage([currentId, args], args.filter(x => (\n                        (x instanceof ArrayBuffer) ||\n                        (x instanceof MessagePort) ||\n                        (x instanceof ImageBitmap)\n                    )));\n                });\n            }\n        };\n\n        return thread;\n\n    }\n\n    this.debounceId = 0;\n\n    this.debounce = async function() {\n\n        const args = [].slice.call(arguments);\n\n        // If batch has expired\n        if (this.batchEnds === undefined || Date.now() >= this.batchEnds) {\n\n            // This describes the end of the \n            // current batch of incoming executions\n            this.batchEnds = Date.now() + this.debounce;\n\n        } \n\n        // Keep the last function call on record\n        this.lastDebounce = args;\n\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n\n                if (this.lastDebounce === args || this.lastExecution === undefined) {\n\n                    this.lastExecution = this.execute.apply(this, args).then((result) => {\n                        // When we have a known result set it to\n                        // the resolved value\n                        this.lastKnownResult = result;\n                        return result;\n                    });\n\n                    // Resolve the new latest value function\n                    resolve(this.lastExecution);\n\n                }\n                \n                // If we have an intermittent known result, resolve that\n                if (this.lastKnownResult !== undefined) {\n                    resolve(this.lastKnownResult);\n                } \n\n                console.log(\"resolve\");\n                // Else lets just resolve to the currently executing\n                // function\n                resolve(this.lastExecution);\n\n            },  \n            this.batchEnds - Date.now()) // The time at which to execute\n\n        });\n\n    }.bind(this);\n\n    this.prioritise =  async function() {\n        this.terminateAll();\n        return this.execute.apply(this, [].slice.call(arguments));\n    }.bind(this);\n\n    this.execute = async function() {\n\n        const args = [].slice.call(arguments);\n\n        while (pool.length < this.totalThreads) {\n            pool.unshift(getThread(asyncFunction));\n        }\n\n        const thread = pool[this.roundRobin].fn.apply(null, args);\n        if (this.roundRobin >= this.totalThreads - 1) {\n            this.roundRobin = 0;\n        } else {\n            this.roundRobin++;\n        }\n        return thread;\n\n    }.bind(this);\n\n    this.getWorkers = () => {\n        return pool;\n    }\n\n    this.terminateAll = () => {\n\n        if (pool.length > 0) {\n            if (pool[this.totalThreads - 1].resolved === false) {\n                // Remove the worker from the pool\n                // and terminate it\n                pool.pop().worker.terminate();\n            }\n        }\n\n    }\n\n}\n\n"],"names":["asyncFunction","totalThreads","debounce","pool","this","roundRobin","const","getThread","let","currentId","promises","worker","Worker","e","Promise","resolve","data","then","v","$$","apply","d","postMessage","filter","x","ArrayBuffer","MessagePort","ImageBitmap","er","onmessage","resolved","fn","args","slice","call","arguments","debounceId","$args","undefined","batchEnds","Date","now","lastDebounce","reject","setTimeout","lastExecution","execute","result","lastKnownResult","console","log","bind","prioritise","terminateAll","length","unshift","thread","getWorkers","pop","terminate"],"mappings":"eAAe,SAAmBA,EAAeC,EAAcC,cAErDC,KACNC,KAAKC,WAAa,EAClBD,KAAKH,aAAeA,GAAgB,EACpCG,KAAKF,SAAWA,GAAY,IAGxBE,KAAKH,aAAe,KACpBG,KAAKH,aAAe,IAUxBK,IAAMC,WAAaP,GAEfQ,IAAIC,EAAY,EAGVC,KAGAC,EAAS,IAAIC,OAEf,YAAYZ,EAAc,uBAAea,GAIrCC,QAAQC,QAAQF,EAAEG,KAAK,IAAIC,cACvBC,UAAKC,GAAGC,MAAMD,GAAID,KACpBD,cAGEI,GACIC,aAAaT,EAAEG,KAAK,GAAI,EAAGK,IAAKA,GAAGE,gBAAOC,UACrCA,aAAaC,aACbD,aAAaE,aACbF,aAAaG,yBAItBC,GAAQN,aAAaT,EAAEG,KAAK,GAAI,EAAG,GAAKY,QAwCpD,OA7BAjB,EAAOkB,mBAAYhB,GAEfH,EAASG,EAAEG,KAAK,IAAIH,EAAEG,KAAK,IAAIH,EAAEG,KAAK,IAGtCN,EAASG,EAAEG,KAAK,IAAM,OAItBc,UAAU,EACVnB,OAAQA,EACRoB,GAAK,WACDzB,IAAM0B,KAAUC,MAAMC,KAAKC,WAC3B,OAAO,IAAIrB,QAAQ,WAGfJ,IAAWD,GAAa0B,UAIxBxB,EAAOW,aAAab,EAAWuB,GAAOA,EAAKT,gBAAOC,UAC7CA,aAAaC,aACbD,aAAaE,aACbF,aAAaG,oBAUlCvB,KAAKgC,WAAa,EAElBhC,KAAKF,oCAAW,4CAEN8B,KAAUC,MAAMC,KAAKG,GAc3B,YAXuBC,IAAnBlC,KAAKmC,WAA2BC,KAAKC,OAASrC,KAAKmC,aAInDnC,KAAKmC,UAAYC,KAAKC,MAAQrC,KAAKF,UAKvCE,KAAKsC,aAAeV,IAEb,IAAIlB,iBAASC,EAAS4B,GACzBC,sBAEQxC,EAAKsC,eAAiBV,QAA+BM,IAAvBlC,EAAKyC,gBAEnCzC,EAAKyC,cAAgBzC,EAAK0C,QAAQ1B,MAAMhB,EAAM4B,GAAMf,cAAM8B,GAItD,OADA3C,EAAK4C,gBAAkBD,EAChBA,IAIXhC,EAAQX,EAAKyC,qBAKYP,IAAzBlC,EAAK4C,iBACLjC,EAAQX,EAAK4C,iBAGjBC,QAAQC,IAAI,WAGZnC,EAAQX,EAAKyC,gBAGjBzC,EAAKmC,UAAYC,KAAKC,wBAI5BU,KAAK/C,MAEPA,KAAKgD,sCAAc,iCAEf,OADAhD,KAAKiD,iBACEjD,KAAK0C,QAAQ1B,MAAMhB,QAAS6B,MAAMC,KAAKG,mBAChDc,KAAK/C,MAEPA,KAAK0C,mCAAU,iCAIX,IAFAxC,IAAM0B,KAAUC,MAAMC,KAAKG,GAEpBlC,EAAKmD,OAASlD,KAAKH,cACtBE,EAAKoD,QAAQhD,EAAUP,IAG3BM,IAAMkD,EAASrD,EAAKC,KAAKC,YAAY0B,GAAGX,MAAM,KAAMY,GAMpD,OALI5B,KAAKC,YAAcD,KAAKH,aAAe,EACvCG,KAAKC,WAAa,EAElBD,KAAKC,eAEFmD,iBAETL,KAAK/C,MAEPA,KAAKqD,6BACMtD,GAGXC,KAAKiD,wBAEGlD,EAAKmD,OAAS,IAC+B,IAAzCnD,EAAKC,EAAKH,aAAe,GAAG6B,UAG5B3B,EAAKuD,MAAM/C,OAAOgD"}