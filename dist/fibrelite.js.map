{"version":3,"file":"fibrelite.js","sources":["../fibrelite.js"],"sourcesContent":["export default function fibrelite(asyncFunction, totalThreads, debounce) {\n\n    const pool = [];\n    this.roundRobin = 0;\n    this.totalThreads = totalThreads || 1;\n    this.debounce = debounce || 333;\n\n    // More than 20 web workers will crash most browsers\n    if (this.totalThreads > 20) {\n        this.totalThreads = 20;\n    }\n\n    // getThread is entirely based on Jason Millers Greenlet \n    // https://github.com/developit/greenlet\n\n    /** Move an async function into its own thread.\n     *  @param {Function} asyncFunction  An (async) function to run in a Worker.\n     *  @public\n     */\n    const getThread = (asyncFunction) => {\n\n        if (!this.cachedObjectUrl) {\n\n            // The URL is a pointer to a stringified function (as a blob object)\n            this.cachedObjectUrl = URL.createObjectURL(new Blob([\n                // Register our wrapper function as the message handler\n                'onmessage=(' + (\n                    // userFunc() is the user-supplied async function\n                    userFunc => e => {\n                        // Invoking within then() captures exceptions in userFunc() as rejections\n                        Promise.resolve(e.data[1]).then(\n                            userFunc.apply.bind(userFunc, userFunc)\n                        ).then(\n                            // success handler - callback(id, SUCCESS(0), result)\n                            d => { postMessage([e.data[0], 0, d]);},\n                            // error handler - callback(id, ERROR(1), error)\n                            e => { postMessage([e.data[0], 1, ''+e]); }\n                        );\n                    }\n                ) + ')(' + asyncFunction + ')'  // pass user-supplied function to the closure\n            ]))\n            \n        }\n\n        // Create an \"inline\" worker (1:1 at definition time)\n        let worker = new Worker(this.cachedObjectUrl),\n\n            // A simple counter is used to generate worker-global unique ID's for RPC:\n            currentId = 0,\n\n            // Outward-facing promises store their \"controllers\" (`[request, reject]`) here:\n            promises = {};\n\n\n        /** Handle RPC results/errors coming back out of the worker.\n         *  Messages coming from the worker take the form `[id, status, result]`:\n         *    id     - counter-based unique ID for the RPC call\n         *    status - 0 for success, 1 for failure\n         *    result - the result or error, depending on `status`\n         */\n\n        worker.onmessage = e => {\n\n            // invoke the promise's resolve() or reject() depending on whether there was an error.\n            promises[e.data[0]][e.data[1]](e.data[2])\n\n            // ... then delete the promise controller\n            promises[e.data[0]] = null;\n\n        };\n\n        // Return a proxy function that forwards calls to the worker & returns a promise for the result.\n        const thread = {\n            resolved: false,\n            worker: worker,\n            fn : function(args) {\n                args = [].slice.call(arguments);\n\n                return new Promise(function() {\n                    thread.resolved = false;\n                    // Add the promise controller to the registry\n                    promises[++currentId] = arguments;\n\n                    // Send an RPC call to the worker - call(id, params)\n                    worker.postMessage([currentId, args]);\n                }).then((result) => {\n                    thread.resolved = true;\n                    return result;\n                })\n            }\n        };\n        return thread;\n\n    }\n\n    this.nextBatch \n\n    this.waitExecute = async (value) => {\n\n        //if (this.totalThreads === 1) {\n\n        this.latestValue = value;\n\n        if (!pool.length) pool[0] = getThread(asyncFunction);\n\n        return new Promise((resolve, reject) => {\n            \n            // If batch has expired\n            if (!this.nextBatch || Date.now() >= this.nextBatch) {\n                this.nextBatch = Date.now() + this.debounce;\n            } \n\n            this.latestValue = value;\n\n            const executeIn = this.nextBatch - (Date.now());\n\n            new Promise(() => {\n                setTimeout(() => {\n\n                    if (this.latestValue === value || this.lastExecution === undefined) {\n                        //console.log(\"latestValue - calling fn\", this.latestValue);\n                        this.lastExecution = this.execute(value).then((result) => {\n                            //console.log(result);\n                            this.lastKnownResult = result;\n                            return result;\n                        });\n\n                        resolve(this.lastExecution);\n                    } else {\n                        //console.log(\"intermediate value, not calling fn\");\n                    }\n\n                    if (this.lastKnownResult !== undefined) {\n                        //console.log(\"Resolving lastKnownResult\", this.lastKnownResult)\n                        resolve(Promise.resolve(this.lastKnownResult));\n                    } \n\n                    \n                    resolve(this.lastExecution);\n\n                },  executeIn) \n            });\n\n        });\n\n        // } else {\n        //     throw Error(\"waitExecute requires only use of one worker\");\n        // }\n\n    }\n\n    this.prioritiseExecute = async (value) => {\n\n        if (pool.length > 0) {\n            if (pool[this.totalThreads - 1].resolved === false) {\n                // Remove the worker from the pool\n                // and terminate it\n                pool.pop().worker.terminate();\n            }\n        }\n        \n        return this.execute(value);\n        \n    }\n\n    this.execute = async (value) => {\n\n        while (pool.length < this.totalThreads) {\n            pool.unshift(getThread(asyncFunction));\n        }\n\n        const thread = pool[this.roundRobin].fn(value);\n        if (this.roundRobin >= this.totalThreads - 1) {\n\n        } else {\n            this.roundRobin++;\n        }\n        return thread;\n\n    }\n\n    this.getCurrentWorker = () => {\n        return currentThread.worker;\n    }\n\n}\n\n"],"names":["asyncFunction","totalThreads","debounce","pool","this","roundRobin","const","getThread","cachedObjectUrl","URL","createObjectURL","Blob","userFunc","e","Promise","resolve","data","then","apply","bind","d","postMessage","let","worker","Worker","currentId","promises","onmessage","thread","resolved","fn","args","slice","call","arguments","result","waitExecute","value","latestValue","length","reject","nextBatch","Date","now","executeIn","setTimeout","undefined","lastExecution","execute","lastKnownResult","prioritiseExecute","pop","terminate","unshift","getCurrentWorker","currentThread"],"mappings":"eAAe,SAAmBA,EAAeC,EAAcC,cAErDC,KACNC,KAAKC,WAAa,EAClBD,KAAKH,aAAeA,GAAgB,EACpCG,KAAKF,SAAWA,GAAY,IAGxBE,KAAKH,aAAe,KACpBG,KAAKH,aAAe,IAUxBK,IAAMC,WAAaP,GAEVI,EAAKI,kBAGNJ,EAAKI,gBAAkBC,IAAIC,gBAAgB,IAAIC,MAE3C,uBAEIC,mBAAYC,GAERC,QAAQC,QAAQF,EAAEG,KAAK,IAAIC,KACvBL,EAASM,MAAMC,KAAKP,EAAUA,IAChCK,cAEEG,GAAOC,aAAaR,EAAEG,KAAK,GAAI,EAAGI,cAElCP,GAAOQ,aAAaR,EAAEG,KAAK,GAAI,EAAG,GAAGH,QAG7C,KAAOb,EAAgB,QAMnCsB,IAAIC,EAAS,IAAIC,OAAOpB,EAAKI,iBAGzBiB,EAAY,EAGZC,KAUJH,EAAOI,mBAAYd,GAGfa,EAASb,EAAEG,KAAK,IAAIH,EAAEG,KAAK,IAAIH,EAAEG,KAAK,IAGtCU,EAASb,EAAEG,KAAK,IAAM,MAK1BV,IAAMsB,GACFC,UAAU,EACVN,OAAQA,EACRO,GAAK,SAASC,GAGV,OAFAA,KAAUC,MAAMC,KAAKC,WAEd,IAAIpB,QAAQ,WACfc,EAAOC,UAAW,EAElBH,IAAWD,GAAaS,UAGxBX,EAAOF,aAAaI,EAAWM,MAChCd,cAAMkB,GAEL,OADAP,EAAOC,UAAW,EACXM,MAInB,OAAOP,GAMXxB,KAAKgC,qBAAqBC,+CAQtB,OAJAjC,KAAKkC,YAAcD,EAEdlC,EAAKoC,SAAQpC,EAAK,GAAKI,EAAUP,MAE/B,IAAIc,iBAASC,EAASyB,KAGpBpC,EAAKqC,WAAaC,KAAKC,OAASvC,EAAKqC,aACtCrC,EAAKqC,UAAYC,KAAKC,MAAQvC,EAAKF,UAGvCE,EAAKkC,YAAcD,EAEnB/B,IAAMsC,EAAYxC,EAAKqC,UAAaC,KAAKC,MAEzC,IAAI7B,mBACA+B,sBAEQzC,EAAKkC,cAAgBD,QAAgCS,IAAvB1C,EAAK2C,gBAEnC3C,EAAK2C,cAAgB3C,EAAK4C,QAAQX,GAAOpB,cAAMkB,GAG3C,OADA/B,EAAK6C,gBAAkBd,EAChBA,IAGXpB,EAAQX,EAAK2C,qBAKYD,IAAzB1C,EAAK6C,iBAELlC,EAAQD,QAAQC,QAAQX,EAAK6C,kBAIjClC,EAAQX,EAAK2C,gBAEbH,mBAWhBxC,KAAK8C,2BAA2Bb,oCAU5B,OARIlC,EAAKoC,OAAS,IAC+B,IAAzCpC,EAAKC,KAAKH,aAAe,GAAG4B,UAG5B1B,EAAKgD,MAAM5B,OAAO6B,cAInBhD,KAAK4C,QAAQX,eAIxBjC,KAAK4C,iBAAiBX,oCAElB,KAAOlC,EAAKoC,OAASnC,KAAKH,cACtBE,EAAKkD,QAAQ9C,EAAUP,IAG3BM,IAAMsB,EAASzB,EAAKC,KAAKC,YAAYyB,GAAGO,GAMxC,OALIjC,KAAKC,YAAcD,KAAKH,aAAe,GAGvCG,KAAKC,eAEFuB,cAIXxB,KAAKkD,mCACMC,cAAchC"}